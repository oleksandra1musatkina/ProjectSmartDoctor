{
  "_from": "uuid-token-generator",
  "_id": "uuid-token-generator@1.0.0",
  "_inBundle": false,
  "_integrity": "sha1-NtsJH2a5TJPwrcJIVo+kc3EWN9s=",
  "_location": "/uuid-token-generator",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "uuid-token-generator",
    "fetchSpec": "latest",
    "name": "uuid-token-generator",
    "raw": "uuid-token-generator",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/uuid-token-generator/-/uuid-token-generator-1.0.0.tgz",
  "_shasum": "36db091f66b94c93f0adc248568fa473711637db",
  "_spec": "uuid-token-generator",
  "_where": "D:\\SOVY\\PROJECTarduino\\project\\server",
  "bugs": {
    "url": "https://github.com/nwoltman/uuid-token-generator/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "uuid": "^3.0.0"
  },
  "deprecated": false,
  "description": "Generates random tokens with custom size and base-encoding using the RFC 4122 v4 UUID algorithm",
  "devDependencies": {
    "coveralls": "^2.11.9",
    "grunt": "^1.0.1",
    "grunt-eslint": "^19.0.0",
    "grunt-mocha-istanbul": "^5.0.1",
    "grunt-mocha-test": "^0.13.2",
    "istanbul": "^0.4.3",
    "jit-grunt": "^0.10.0",
    "mocha": "^3.1.2",
    "should": "^11.1.1"
  },
  "engines": {
    "node": ">=4"
  },
  "files": [
    "LICENSE.txt",
    "index.js"
  ],
  "homepage": "https://github.com/nwoltman/uuid-token-generator",
  "keywords": [
    "generator",
    "random",
    "token",
    "uid",
    "unique",
    "uuid"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "uuid-token-generator",
  "optionalDependencies": {},
  "readme": "# UUID Token Generator\r\n\r\n[![NPM Version](https://img.shields.io/npm/v/uuid-token-generator.svg)](https://www.npmjs.com/package/uuid-token-generator)\r\n[![Build Status](https://travis-ci.org/nwoltman/uuid-token-generator.svg?branch=master)](https://travis-ci.org/nwoltman/uuid-token-generator)\r\n[![Coverage Status](https://coveralls.io/repos/nwoltman/uuid-token-generator/badge.svg?branch=master&service=github)](https://coveralls.io/github/nwoltman/uuid-token-generator?branch=master)\r\n[![Dependency Status](https://david-dm.org/nwoltman/uuid-token-generator.svg)](https://david-dm.org/nwoltman/uuid-token-generator)\r\n[![devDependency Status](https://david-dm.org/nwoltman/uuid-token-generator/dev-status.svg)](https://david-dm.org/nwoltman/uuid-token-generator#info=devDependencies)\r\n\r\nProvides a class that generates random tokens with custom size and base-encoding using the [RFC 4122](http://www.ietf.org/rfc/rfc4122.txt) v4 UUID algorithm. Generated tokens are strings that are guaranteed to always be the same length, depending on the [bit-size](#new-tokgeneratorbitsize-baseencoding--object) specified for the token.\r\n\r\nGreat for generating things like API keys and compact UIDs.\r\n\r\n---\r\n### WARNING\r\n---\r\n\r\n**This package is no longer being maintained because a better one exists—[uid-generator](https://www.npmjs.com/package/uid-generator)—which is better for the following reasons:**\r\n\r\n+ **It has more flexible token generation options**\r\n  + **i.e. You can specify the length of the token that you'd like to generate**\r\n+ **It has both a synchronous and asynchronous interface**\r\n+ **It is less likely to produce colliding tokens**\r\n+ **It's more performant**\r\n\r\n---\r\n\r\n\r\n## Installation\r\n\r\n```sh\r\nnpm install uuid-token-generator --save\r\n```\r\n\r\n\r\n## Usage\r\n\r\n```js\r\nconst TokenGenerator = require('uuid-token-generator');\r\n\r\nconst tokgen = new TokenGenerator(); // Default is a 128-bit token encoded in base58\r\ntokgen.generate();\r\n// -> '4QhmRwHwwrgFqXULXNtx4d'\r\n\r\nconst tokgen2 = new TokenGenerator(256, TokenGenerator.BASE62);\r\ntokgen2.generate();\r\n// -> 'x6GCX3aq9hIT8gjhvO96ObYj0W5HBVTsj64eqCuVc5X'\r\n```\r\n\r\n\r\n## API\r\n\r\n### new TokenGenerator([bitSize][, baseEncoding]) ⇒ `Object`\r\nCreates a new TokenGenerator instance that generates `bitSize`-bit tokens encoded using the characters in `baseEncoding`.\r\n\r\n| Param | Default | Type | Description |\r\n|:------|:--------|:-----|:------------|\r\n| [bitSize] | `128` | number | The size of the token to generate in bits. Must be a multiple of 128. |\r\n| [baseEncoding] | `TokenGenerator.BASE58` | string | One of the `TokenGenerator.BASE##` constants or a custom string of characters to use to encode the token. |\r\n\r\n**Example**\r\n```js\r\nnew TokenGenerator();\r\nnew TokenGenerator(256);\r\nnew TokenGenerator(TokenGenerator.BASE36);\r\nnew TokenGenerator(512, TokenGenerator.BASE62);\r\nnew TokenGenerator('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz+/'); // Custom encoding (base64)\r\n```\r\n\r\n---\r\n\r\n### TokenGenerator.BASE16 : `String`\r\n`0123456789abcdef`\r\n\r\n### TokenGenerator.BASE36 : `String`\r\n`0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ`\r\n\r\n### TokenGenerator.BASE58 : `String`\r\n`123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz`\r\n\r\n### TokenGenerator.BASE62 : `String`\r\n`0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz`\r\n\r\n### TokenGenerator.BASE66 : `String`\r\n`0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~`\r\n\r\n(all ASCII characters that do not need to be encoded in a URI as specified by [RFC 3986](http://tools.ietf.org/html/rfc3986))\r\n\r\n### TokenGenerator.BASE71 : `String`\r\n`0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!'()*-._~`\r\n\r\n(all ASCII characters that are not encoded by `encodeURIComponent()`)\r\n\r\n---\r\n\r\n### tokgen.generate() ⇒ `String`\r\nGenerates a random token.\r\n\r\n**Returns**: `String` - A random token that is always `tokgen.tokenLength` characters long.\r\n\r\n**Example**\r\n```js\r\nconst tokgen = new TokenGenerator();\r\ntokgen.generate();\r\n// -> 'vf5NrETkUKCa6FhkyRSazD'\r\n```\r\n\r\n---\r\n\r\n### (readonly) tokgen.bitSize : `Number`\r\nThe size of the token that will be generated in bits (the `bitSize` value passed to the `TokenGenerator` constructor).\r\n\r\n**Example**\r\n```js\r\nnew TokenGenerator().bitSize // -> 128\r\nnew TokenGenerator(256).bitSize // -> 256\r\n```\r\n\r\n### (readonly) tokgen.baseEncoding : `String`\r\nThe set of characters used to encode the token (the `baseEncoding` value passed to the `TokenGenerator` constructor).\r\n\r\n**Example**\r\n```js\r\nnew TokenGenerator().baseEncoding // -> '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\r\nnew TokenGenerator('abc').baseEncoding // -> 'abc'\r\n```\r\n\r\n### (readonly) tokgen.base : `Number`\r\nThe base of the token that will be generated (which is the number of characters in the `baseEncoding`).\r\n\r\n**Example**\r\n```js\r\nnew TokenGenerator().base // -> 58\r\nnew TokenGenerator(TokenGenerator.BASE62).base // -> 62\r\nnew TokenGenerator('abc').base // -> 3\r\n```\r\n\r\n### (readonly) tokgen.tokenLength : `Number`\r\nThe length of the token that will be generated. The generated token will always be this length.  \r\nCalculated as such: `tokenLength = Math.ceil(bitSize / Math.log2(base))`\r\n\r\n**Example**\r\n```js\r\nnew TokenGenerator().tokenLength // -> 22\r\nnew TokenGenerator(256, TokenGenerator.BASE62).tokenLength // -> 43\r\n```\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/nwoltman/uuid-token-generator.git"
  },
  "scripts": {
    "test": "grunt"
  },
  "version": "1.0.0"
}
