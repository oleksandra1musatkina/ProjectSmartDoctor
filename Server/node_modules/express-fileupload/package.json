{
  "_from": "express-fileupload",
  "_id": "express-fileupload@1.1.1-alpha.1",
  "_inBundle": false,
  "_integrity": "sha512-zyZXaguQWdBT6kZL5HIuV//PCpmGKbYlDvu4FEpayeS3ONWwMaELDQPUgyyrEEbCyUhFmqrdHCkCUGL5LMVKEQ==",
  "_location": "/express-fileupload",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "express-fileupload",
    "fetchSpec": "latest",
    "name": "express-fileupload",
    "raw": "express-fileupload",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/express-fileupload/-/express-fileupload-1.1.1-alpha.1.tgz",
  "_shasum": "cfb452c971e0cc949cc3ccdb1ef578e8afb64716",
  "_spec": "express-fileupload",
  "_where": "D:\\SOVY\\PROJECTarduino\\project\\server",
  "author": {
    "email": "richardgirges@gmail.com",
    "name": "Richard Girges"
  },
  "bugs": {
    "url": "https://github.com/richardgirges/express-fileupload/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "busboy": "^0.2.14",
    "md5": "^2.2.1",
    "streamifier": "^0.1.1"
  },
  "deprecated": false,
  "description": "Simple express file upload middleware that wraps around Busboy",
  "devDependencies": {
    "body-parser": "^1.18.3",
    "coveralls": "^3.0.2",
    "eslint": "^5.9.0",
    "express": "^4.16.3",
    "istanbul": "^0.4.5",
    "mocha": "^5.2.0",
    "rimraf": "^2.6.2",
    "supertest": "^3.3.0"
  },
  "engines": {
    "node": ">=4.0.0"
  },
  "homepage": "https://github.com/richardgirges/express-fileupload#readme",
  "keywords": [
    "busboy",
    "express",
    "file-upload",
    "files",
    "forms",
    "middleware",
    "multipart",
    "upload"
  ],
  "license": "MIT",
  "main": "./lib/index",
  "name": "express-fileupload",
  "optionalDependencies": {},
  "readme": "# express-fileupload\r\nSimple express middleware for uploading files.\r\n\r\n[![npm](https://img.shields.io/npm/v/express-fileupload.svg)](https://www.npmjs.org/package/express-fileupload)\r\n[![Build Status](https://travis-ci.org/richardgirges/express-fileupload.svg?branch=master)](https://travis-ci.org/richardgirges/express-fileupload)\r\n[![downloads per month](http://img.shields.io/npm/dm/express-fileupload.svg)](https://www.npmjs.org/package/express-fileupload)\r\n[![Coverage Status](https://img.shields.io/coveralls/richardgirges/express-fileupload.svg)](https://coveralls.io/r/richardgirges/express-fileupload)\r\n\r\n# Version 1.0.0 Breaking Changes\r\nBreaking change to `md5` handling. [Read about it here.](https://github.com/richardgirges/express-fileupload/releases/tag/v1.0.0-alpha.1)\r\n\r\n# Install\r\n```bash\r\n# With NPM\r\nnpm install --save express-fileupload\r\n\r\n# With Yarn\r\nyarn add express-fileupload\r\n```\r\n\r\n# Usage\r\nWhen you upload a file, the file will be accessible from `req.files`.\r\n\r\nExample:\r\n* You're uploading a file called **car.jpg**\r\n* Your input's name field is **foo**: `<input name=\"foo\" type=\"file\" />`\r\n* In your express server request, you can access your uploaded file from `req.files.foo`:\r\n```javascript\r\napp.post('/upload', function(req, res) {\r\n  console.log(req.files.foo); // the uploaded file object\r\n});\r\n```\r\n\r\nThe **req.files.foo** object will contain the following:\r\n* `req.files.foo.name`: \"car.jpg\"\r\n* `req.files.foo.mv`: A function to move the file elsewhere on your server\r\n* `req.files.foo.mimetype`: The mimetype of your file\r\n* `req.files.foo.data`: A buffer representation of your file\r\n* `req.files.foo.truncated`: A boolean that represents if the file is over the size limit\r\n* `req.files.foo.md5`: A function that returns an MD5 checksum of the uploaded file\r\n\r\n### Examples\r\n* [Example Project](https://github.com/richardgirges/express-fileupload/tree/master/example)\r\n* [Basic File Upload](https://github.com/richardgirges/express-fileupload/tree/master/example#basic-file-upload)\r\n* [Multi-File Upload](https://github.com/richardgirges/express-fileupload/tree/master/example#multi-file-upload)\r\n\r\n### Using Busboy Options\r\nPass in Busboy options directly to the express-fileupload middleware. [Check out the Busboy documentation here.](https://github.com/mscdex/busboy#api)\r\n\r\n```javascript\r\napp.use(fileUpload({\r\n  limits: { fileSize: 50 * 1024 * 1024 },\r\n}));\r\n```\r\n\r\n### Using useTempFile Options\r\nUse temp files instead of memory for managing the upload process.\r\nPlease note: md5 hashes will not be generated when using tempFiles\r\n```javascript\r\napp.use(fileUpload({\r\n    useTempFiles : true,\r\n    tempFileDir : '/tmp/'\r\n}));\r\n```\r\n\r\n### Available Options\r\nPass in non-Busboy options directly to the middleware. These are express-fileupload specific options.\r\n\r\nOption | Acceptable&nbsp;Values | Details\r\n--- | --- | ---\r\ncreateParentPath | <ul><li><code>false</code>&nbsp;**(default)**</li><li><code>true</code></ul> | Automatically creates the directory path specified in `.mv(filePathName)`\r\nsafeFileNames | <ul><li><code>false</code>&nbsp;**(default)**</li><li><code>true</code></li><li>regex</li></ul> | Strips characters from the upload's filename. You can use custom regex to determine what to strip. If set to `true`, non-alphanumeric characters _except_ dashes and underscores will be stripped. This option is off by default.<br /><br />**Example #1 (strip slashes from file names):** `app.use(fileUpload({ safeFileNames: /\\\\/g }))`<br />**Example #2:** `app.use(fileUpload({ safeFileNames: true }))`\r\npreserveExtension | <ul><li><code>false</code>&nbsp;**(default)**</li><li><code>true</code></li><li><code>*Number*</code></li></ul> | Preserves filename extension when using <code>safeFileNames</code> option. If set to <code>true</code>, will default to an extension length of 3. If set to <code>*Number*</code>, this will be the max allowable extension length. If an extension is smaller than the extension length, it remains untouched. If the extension is longer, it is shifted.<br /><br />**Example #1 (true):**<br /><code>app.use(fileUpload({ safeFileNames: true, preserveExtension: true }));</code><br />*myFileName.ext* --> *myFileName.ext*<br /><br />**Example #2 (max extension length 2, extension shifted):**<br /><code>app.use(fileUpload({ safeFileNames: true, preserveExtension: 2 }));</code><br />*myFileName.ext* --> *myFileNamee.xt*\r\nabortOnLimit | <ul><li><code>false</code>&nbsp;**(default)**</li><li><code>true</code></ul> | Returns a HTTP 413 when the file is bigger than the size limit if true. Otherwise, it will add a <code>truncate = true</code> to the resulting file structure.\r\nuseTempFiles | <ul><li><code>false</code>&nbsp;**(default)**</li><li><code>true</code></ul> | Will use temporary files at the specified tempDir for managing uploads rather than using buffers in memory. This avoids memory issues when uploading large files.\r\ntempFileDir | <ul><li><code>String</code>&nbsp;**(path)**</li></ul> | Used with the <code>useTempFiles</code> option. Path to the directory where temp files will be stored during the upload process. Add trailing slash.\r\nparseNested | <ul><li><code>false</code>&nbsp;**(default)**</li><li><code>true</code></li></ul> | By default, req.body and req.files are flattened like this: <code>{'name': 'John', 'hobbies[0]': 'Cinema', 'hobbies[1]': 'Bike'}</code><br /><br/>When this option is enabled they are parsed in order to be nested like this: <code>{'name': 'John', 'hobbies': ['Cinema', 'Bike']}</code>\r\n\r\n# Help Wanted\r\nLooking for additional maintainers. Please contact `richardgirges [ at ] gmail.com` if you're interested. Pull Requests are welcomed! \r\n\r\n# Thanks & Credit\r\n[Brian White](https://github.com/mscdex) for his stellar work on the [Busboy Package](https://github.com/mscdex/busboy) and the [connect-busboy Package](https://github.com/mscdex/connect-busboy)\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/richardgirges/express-fileupload.git"
  },
  "scripts": {
    "coveralls": "cat ./coverage/lcov.info | coveralls",
    "lint": "eslint ./",
    "test": "istanbul cover _mocha -- -R spec"
  },
  "version": "1.1.1-alpha.1"
}
